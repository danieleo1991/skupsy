require("dotenv").config();
const express = require("express");
const cors = require("cors");
const axios = require("axios");
const multer = require("multer");
const crypto = require("crypto");
const fs = require("fs");
const { OpenAI } = require("openai");

const app = express();

// CORS dla frontendu
app.use(cors({
  origin: 'https://stepmedia.pl',
  methods: ['GET', 'POST'],
  credentials: false
}));

const upload = multer({
  dest: "uploads/",
  limits: { fileSize: 8 * 1024 * 1024 }, // 8 MB
});

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

app.post("/app", upload.single("image"), async (req, res) => {
  if (!req.file) return res.status(400).json({ error: "Brak zdjƒôcia." });

  try {
    const imageData = fs.readFileSync(req.file.path, { encoding: "base64" });
	const imageHash = crypto.createHash("sha1").update(imageData).digest("hex");
    const mimeType = req.file.mimetype;
	
	try {
		const check = await axios.post("https://stepmedia.pl/skupsy/app/check-hash-image.php", {
			secret: "777",
			image_hash: imageHash
		});
		if (check.data.status === "found") {
			return res.send({ wynik: check.data });
		}
	}
	catch (err) {
		console.error("‚ùå B≈ÇƒÖd sprawdzania hasha:", err.message);
    }

    const response = await openai.chat.completions.create({
		model: "gpt-4.1-mini",
		temperature: 0,
		messages: [
		{
			role: "user",
			content: [
            {
              type: "text",
              text: `Jeste≈õ generatorem JSON i pracownikiem lombardu. Na podstawie zdjƒôcia oce≈Ñ, co to za przedmiot. Nastƒôpnie oszacuj jego warto≈õƒá rynkowƒÖ jako u≈ºywanego, i okre≈õl za jakƒÖ kwotƒô lombard m√≥g≈Çby go odkupiƒá (z mar≈ºƒÖ - czyli 35% warto≈õci rynkowej u≈ºywanego przedmiotu, bez wyjƒÖtku. Nie zaokrƒÖglaj do przedzia≈Ç√≥w ani pe≈Çnych setek). 

Okre≈õl te≈º g≈Ç√≥wnƒÖ kategoriƒô przedmiotu, np.: "Elektronika", "Samoch√≥d", "Bi≈ºuteria", "AGD", "Odzie≈º", "Narzƒôdzia", "Inne".

Dodatkowo podaj stopie≈Ñ pewno≈õci co do identyfikacji przedmiotu w skali od 1 (zgadujƒô) do 10 (100% pewno≈õƒá). Zwr√≥ƒá to jako pole "definitely".

Wynik zwr√≥ƒá w **czystym formacie JSON**:

{
  "status": "true je≈õli masz pewno≈õƒá co to za przedmiot lub false je≈õli nie masz",
  "product_name": "dok≈Çadna nazwa przedmiotu",
  "product_category_name": "g≈Ç√≥wna kategoria, np. Elektronika",
  "product_my_price": "np. 250 + we≈∫ pod uwagƒô stan przedmiotu (je≈õli "10" - g√≥rna granica, je≈õli "1" - najni≈ºsza granica + kwotƒô zaokrƒÖglij kwotƒô w d√≥≈Ç",
  "definitely": "liczba od 1 do 10 w≈ÇƒÖcznie okre≈õlajƒÖca jak bardzo jeste≈õ pewien",
  "condition": "liczba od 1 do 10 w≈ÇƒÖcznie okre≈õlajƒÖca obecny stan przedmiotu ze zdjƒôcia",
  "potential": "potencja≈Ç sprzeda≈ºy przez lombard w skali od 1 do 10 w≈ÇƒÖcznie. Uwzglƒôdnij zapotrzebowanie rynkowe na ten produkt, popularno≈õƒá. Lombard musi byƒá zarobiƒá na tym ≈Çatwo i szybko. Je≈ºeli uznasz, ≈ºe ten przedmiot jest super ≈Çatwo sprzeda≈º z du≈ºym zyskiem to wynik: 10, je≈ºeli ciƒô≈ºko i ma≈Çy zysk to potencja≈Ç sprzeda≈ºy: 1"
}

Zwr√≥ƒá tylko ten JSON. ≈ªadnych opis√≥w ani komentarzy.`
            },
            {
              type: "image_url",
              image_url: {
                url: `data:${mimeType};base64,${imageData}`
              }
            }
          ]
        }
      ],
      max_tokens: 1000,
    });

    const content = response.choices[0].message.content;
    let wynik;

    try {
      const match = content.match(/{[\s\S]*}/);
	  if (match) {
		wynik = JSON.parse(match[0]);
	  } else {
		throw new Error("Nie znaleziono ≈ºadnego JSON-a w tre≈õci");
	  }
    } catch (e) {
      console.error("‚ùó B≈ÇƒÖd parsowania JSON:", e.message);
      wynik = { error: "Nie uda≈Ço siƒô sparsowaƒá odpowiedzi GPT jako JSON." };
    }
	
	const quotationResponse = await axios.post("https://stepmedia.pl/skupsy/app/quotation.php", {
		secret: "777",
		image_hash: imageHash,
		product_name: wynik.product_name,
		product_category_name: wynik.product_category_name,
		product_my_price: wynik.product_my_price,
		definitely: wynik.definitely,
		condition: wynik.condition,
		potential: wynik.potential,
		status: wynik.status
	});

    res.send(quotationResponse.data);

  } catch (error) {
    console.error("‚ùå B≈ÇƒÖd serwera:", error?.message || error);
    if (error?.response?.data) {
      console.error("üì¶ Szczeg√≥≈Çy odpowiedzi OpenAI:", error.response.data);
    }
    res.status(500).json({ error: "B≈ÇƒÖd przetwarzania obrazu." });
  } finally {
    fs.unlinkSync(req.file.path);
  }
});

app.listen(process.env.PORT || 3000, () => {
  console.log("Serwer dzia≈Ça");
});
