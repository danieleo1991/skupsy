require("dotenv").config();
const express = require("express");
const cors = require("cors");
const axios = require("axios");
const multer = require("multer");
const crypto = require("crypto");
const fs = require("fs");
const { OpenAI } = require("openai");

const app = express();

// CORS dla frontendu
app.use(cors({
  origin: 'https://stepmedia.pl',
  methods: ['GET', 'POST'],
  credentials: false
}));

const upload = multer({
  dest: "uploads/",
  limits: { fileSize: 8 * 1024 * 1024 }, // 8 MB
});

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

app.post("/app", upload.single("image"), async (req, res) => {
	
	if (!req.file) return res.status(400).json({ error: "Brak zdjƒôcia." });

	try {
		
		const openAI_messages = [];
		const quotationKey = req.body.quotation_key;
		const imageData = fs.readFileSync(req.file.path, { encoding: "base64" });
		const imageHash = crypto.createHash("sha1").update(imageData).digest("hex");
		const mimeType = req.file.mimetype;
		const imageBase64 = `data:${mimeType};base64,${imageData}`;
		
		if (quotationKey) {
			
			const quotation = await axios.post("https://stepmedia.pl/skupsy/app/get-quotation.php", {
				secret: "777",
				quotation_key: quotationKey
			});
			
			openAI_messages.push({
				role: "user",
				content: `Oto pierwsze zdjƒôcie przedmiotu. Proszƒô o wycenƒô.`
			});

			openAI_messages.push({
				role: "assistant",
				content: JSON.stringify({
					status: quotation.data.status,
					product_name: quotation.data.product_name,
					product_category_name: quotation.data.product_category_name,
					definitely: quotation.data.definitely,
					condition: quotation.data.condition,
					potential: quotation.data.potential,
					product_my_price: quotation.data.product_my_price,
					need_more_info: quotation.data.need_more_info,
					photo_request: quotation.data.photo_request
				})
			});

			openAI_messages.push({
				role: "user",
				content: `Oto dodatkowe zdjƒôcie - zgodnie z wcze≈õniejszƒÖ pro≈õbƒÖ.`
			});
			
		}
		else {
			
			openAI_messages.push({
				role: "user",
				content: [
					{
						type: "text",
						text: `Jeste≈õ generatorem JSON i pracownikiem lombardu. Na podstawie zdjƒôcia oce≈Ñ, co to za przedmiot - dok≈Çadnie, wraz z modelem lub markƒÖ.

						Okre≈õl te≈º g≈Ç√≥wnƒÖ kategoriƒô przedmiotu, np.: "Elektronika", "Samoch√≥d", "Bi≈ºuteria", "AGD", "Odzie≈º", "Narzƒôdzia", "Inne".

	Dodatkowo podaj stopie≈Ñ pewno≈õci co do identyfikacji przedmiotu w skali od 1 (zgadujƒô) do 10 (100% pewno≈õƒá). Zwr√≥ƒá to jako pole "definitely".

	Je≈õli jako≈õƒá zdjƒôcia lub jego zawarto≈õƒá nie pozwala jednoznacznie zidentyfikowaƒá przedmiotu lub jego stanu, dodaj pole 'photo_request', w kt√≥rym zasugerujesz u≈ºytkownikowi jakie dok≈Çadnie zdjƒôcie powinien dos≈Çaƒá. Np. "Proszƒô o zdjƒôcie tabliczki znamionowej z danymi technicznymi", "Proszƒô o zdjƒôcie z innej perspektywy, pokazujƒÖce stan obudowy", "Proszƒô o zdjƒôcie logo producenta i modelu", itp. Je≈õli dodatkowe zdjƒôcie nie jest potrzebne, pomi≈Ñ to pole.


	Wynik zwr√≥ƒá w **czystym formacie JSON**:

	{
	  "status": "true je≈õli masz pewno≈õƒá co to za przedmiot lub false je≈õli nie masz",
	  "product_name": "dok≈Çadna nazwa przedmiotu wraz z modelem",
	  "product_category_name": "g≈Ç√≥wna kategoria, np. Elektronika",
	  "definitely": "liczba od 1 do 10 w≈ÇƒÖcznie okre≈õlajƒÖca jak bardzo jeste≈õ pewien",
	  "condition": "liczba od 1 do 10 w≈ÇƒÖcznie okre≈õlajƒÖca obecny stan przedmiotu ze zdjƒôcia",
	  "potential": "potencja≈Ç sprzeda≈ºy przez lombard w skali od 1 do 10 w≈ÇƒÖcznie. Uwzglƒôdnij zapotrzebowanie rynkowe na ten produkt, popularno≈õƒá. Lombard musi byƒá zarobiƒá na tym ≈Çatwo i szybko. Je≈ºeli uznasz, ≈ºe ten przedmiot jest super ≈Çatwo sprzeda≈º z du≈ºym zyskiem to wynik: 10, je≈ºeli ciƒô≈ºko i ma≈Çy zysk to potencja≈Ç sprzeda≈ºy: 1",
	  "product_my_price": "np. 250. ZaokrƒÖglij wynik w d√≥≈Ç do pe≈Çnych setek (np. 1125 z≈Ç ‚Üí 1100 z≈Ç lub 85 z≈Ç ‚Üí 80 z≈Ç). Oszacuj warto≈õƒá rynkowƒÖ produktu jako u≈ºywanego, i okre≈õl za jakƒÖ kwotƒô lombard m√≥g≈Çby go odkupiƒá. We≈∫ pod uwagƒô stan przedmiotu (warto≈õƒá 'condition') tj. je≈õli '10' to 25% warto≈õci rynkowej u≈ºywanego przedmiotu, je≈õli '1' to 10% warto≈õci rynkowej u≈ºywanego przedmiotu i reszta analogicznie. We≈∫ tak≈ºe pod uwagƒô parametr 'potential' - im wy≈ºszy tym wy≈ºsza warto≈õƒá produktu, a im ni≈ºszy ni≈º tym ni≈ºsza warto≈õƒá produktu",
	  "need_more_info": "wpisz '1' je≈õli do wyceny potrzebujesz wiƒôcej informacji (np. ilo≈õƒá RAM itp.) lub wpisz '0' je≈õli nie potrzebujesz dodatkowych informacji, aby wyceniƒá dok≈Çadnie produkt",
	  "photo_request": "je≈õli potrzebne jest dodatkowe zdjƒôcie - wpisz instrukcjƒô jakie, np. 'Proszƒô o zdjƒôcie tabliczki znamionowej'. Je≈õli niepotrzebne ‚Äì pomi≈Ñ to pole."
	}

	Zwr√≥ƒá tylko ten JSON. ≈ªadnych opis√≥w ani komentarzy.`
				},
				{
				  type: "image_url",
				  image_url: {
					url: `data:${mimeType};base64,${imageData}`
				  }
				}
			  ]
			});
			
		}

		try {
			const check = await axios.post("https://stepmedia.pl/skupsy/app/check-hash-image.php", {
				secret: "777",
				image_hash: imageHash
			});
			if (check.data.status === "found") {
				return res.send(check.data);
			}
		}
		catch (err) {
			console.error("‚ùå B≈ÇƒÖd sprawdzania hasha:", err.message);
		}

    const response = await openai.chat.completions.create({
		model: "gpt-4.1-mini",
		temperature: 0,
		messages: openAI_messages,
		max_tokens: 1000,
    });

    const content = response.choices[0].message.content;
    let wynik;

    try {
      const match = content.match(/{[\s\S]*}/);
	  if (match) {
		wynik = JSON.parse(match[0]);
	  } else {
		throw new Error("Nie znaleziono ≈ºadnego JSON-a w tre≈õci");
	  }
    } catch (e) {
      console.error("‚ùó B≈ÇƒÖd parsowania JSON:", e.message);
      wynik = { error: "Nie uda≈Ço siƒô sparsowaƒá odpowiedzi GPT jako JSON." };
    }
	
	const quotationResponse = await axios.post("https://stepmedia.pl/skupsy/app/quotation.php", {
		secret: "777",
		image_hash: imageHash,
		image_base64: imageBase64,
		product_name: wynik.product_name,
		product_category_name: wynik.product_category_name,
		product_my_price: wynik.product_my_price,
		definitely: wynik.definitely,
		condition: wynik.condition,
		potential: wynik.potential,
		status: wynik.status,
		need_more_info: wynik.need_more_info,
		photo_request: wynik.photo_request
	});

    res.send(quotationResponse.data);

  } catch (error) {
    console.error("‚ùå B≈ÇƒÖd serwera:", error?.message || error);
    if (error?.response?.data) {
      console.error("üì¶ Szczeg√≥≈Çy odpowiedzi OpenAI:", error.response.data);
    }
    res.status(500).json({ error: "B≈ÇƒÖd przetwarzania obrazu." });
  } finally {
    fs.unlinkSync(req.file.path);
  }
});

app.listen(process.env.PORT || 3000, () => {
  console.log("Serwer dzia≈Ça");
});
